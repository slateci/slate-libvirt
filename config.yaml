  passwd:
    users:
      - name: core
        ssh_authorized_keys:
          - "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCo3a7EUYD8qEwMBYlOzNFXXA55Lpcbgl5qlmiuwXdrOV/APr2uoIw3vYix4yYPTQPr8trfscX/NaDpVAhivlmd31ylGBjIaK/Qo0L2aTv38m9++dfflf9AdUtKdMIfddBNyOh5FlTzropoElvdVulJyGIJv6+rQeDMyaKt5HGOJ8yg+xtqcTDbfzHWVK2POP3PlcQsMg+5MkAJQDV2gvO3NxRF+ureedEtSmvEuJNUIGatM3l09FfbU9nOM9T+8xrz9tTJLMhB7QWXcd8V5IFMo+fCoSJG4qKPUrkqIHXvpNRmQ8CvEeVxwgHl/3R+Jtg8OYs7P5mmoKw4r+OBAYhL lincolnb@nam-shub"
  storage:
    directories:
      - filesystem: "root"
        path: "/opt/slate/bin"
        mode: 0755
      - filesystem: "root"
        path: "/opt/slate/cfg"
        mode: 0755
      - filesystem: "root"
        path: "/opt/slate/scripts"
        mode: 0755
      - filesystem: "root"
        path: "/opt/cni/bin"
        mode: 0755
      - filesystem: "root"
        path: "/etc/kubernetes/pki/etcd"
        mode: 0755 
      - filesystem: "root"
        path: "/etc/kubernetes/pki/calico"
        mode: 0755
    files: 
      - filesystem: "root"
        path: "/opt/slate/scripts/make-scratch.sh"
        mode: 0755
        contents: 
          local: "make-scratch.sh"
      - filesystem: "root"
        path: "/opt/slate/scripts/fetch.sh"
        mode: 0755
        contents: 
          local: "fetch.sh"
      - filesystem: "root"
        path: "/opt/slate/scripts/kubeadm.sh"
        mode: 0755
        contents: 
          local: "kubeadm.sh"
      - filesystem: "root"
        path: "/opt/slate/scripts/calico.sh"
        mode: 0755
        contents: 
          local: "calico.sh"
      #- filesystem: "metallb.sh"
      #  path: "/opt/slate/scripts/metallb.sh"
      #  mode: 0755
      #  contents: 
      #    local: "metallb.sh"
      - filesystem: "root"
        path: "/etc/systemctl.d/nonlocalbind.conf"
        mode: 0644 
        contents:
          inline: net.ipv4.ip_nonlocal_bind=1
  systemd:
    ###############################################
    #           autologin block                   #
    ###############################################
    units:
      - name: serial-getty@.service
        dropins:
          - name: 10-autologin.conf
            contents: |
              [Service]
              ExecStart=
              ExecStart=-/sbin/agetty --autologin core --keep-baud %I 115200,38400,9600 $TERM
      - name: getty@.service
        dropins:
          - name: 10-autologin.conf
            contents: |
              [Service]
              ExecStart=
              ExecStart=-/sbin/agetty --autologin core --noclear %I $TERM
      - name: emergency.service
        dropins:
          - name: 10-autologin.conf
            contents: |
              [Service]
              ExecStart=
              ExecStart=-/bin/sh -c "/usr/bin/login -f root; /usr/bin/systemctl --job-mode=fail --no-block default"
    ###############################################
      - name: "locksmithd.service"
        mask: true
      - name: "update-engine.service"
        enabled: true
#      - name: "create-ephemeral.service"
#        enabled: true
#        contents: | 
#          [Unit]
#          Description=Create ephemeral disk
#          After=kubelet.service
#          [Service]
#          Type=oneshot
#          ExecStart=/opt/scripts/make-scratch.sh
#          [Install]
#          WantedBy=multi-user.target
      - name: "fetch.service"
        enabled: true
        contents: | 
          [Unit]
          Description=Fetch kubernetes and such
          After=docker.service
          [Service]
          Type=oneshot
          ExecStart=/opt/slate/scripts/fetch.sh
          [Install]
          WantedBy=multi-user.target
#      - name: "kubeadm.service"
#        enabled: true
#        contents: | 
#          [Unit]
#          Description=Setup Kubernetes with Kubeadm
#          After=fetch.service
#          [Service]
#          Type=oneshot
#          ExecStart=/opt/slate/scripts/kubeadm.sh
#          [Install]
#          WantedBy=multi-user.target
#      - name: "calico-cfg.service"
#        enabled: true
#        contents: | 
#          [Unit]
#          Description=Configure Calico networking
#          After="kubeadm.service"
#          [Service]
#          Type=oneshot
#          ExecStart=/opt/slate/scripts/calico.sh
#          [Install]
#          WantedBy=multi-user.target
#      - name: "metallb-cfg.service"
#        enabled: true
#        contents: | 
#          [Unit]
#          Description=Configure MetalLB
#          After="calico-cfg.service"
#          [Service]
#          Type=oneshot
#          ExecStart=/opt/slate/scripts/metallb.sh
#          [Install]
#          WantedBy=multi-user.target
#      - name: "docker.service"
#        enabled: true
#      - name: "kubelet.service"
#        enabled: true
#        contents: |
#          [Unit]
#          Description=kubelet: The Kubernetes Node Agent
#          Documentation=http://kubernetes.io/docs/
#          [Service]
#          ExecStartPre=/usr/bin/mkdir -p /etc/cni/net.d
#          ExecStartPre=/usr/bin/mkdir -p /opt/cni/bin
#          ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests
#          ExecStartPre=/usr/bin/mkdir -p /var/log/containers
#          ExecStart=/opt/bin/kubelet
#          Restart=always
#          StartLimitInterval=0
#          RestartSec=10
#          [Install]
#          WantedBy=multi-user.target
#        dropins:
#          - name: "10-kubeadm.conf"
#            contents: |
#              [Service]
#              Environment="KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf"
#              Environment="KUBELET_SYSTEM_PODS_ARGS=--pod-manifest-path=/etc/kubernetes/manifests --allow-privileged=true --serialize-image-pulls=false"
#              Environment="KUBELET_NETWORK_ARGS=--network-plugin=cni --cni-conf-dir=/etc/cni/net.d --cni-bin-dir=/opt/cni/bin"
#              Environment="KUBELET_DNS_ARGS=--cluster-dns=10.255.99.10 --cluster-domain=cluster.local"
#              Environment="KUBELET_AUTHZ_ARGS=--authorization-mode=Webhook --client-ca-file=/etc/kubernetes/pki/ca.crt"
#              Environment="KUBELET_CGROUP_ARGS=--cgroup-driver=cgroupfs"
#              Environment="KUBELET_CADVISOR_ARGS=--cadvisor-port=0"
#              Environment="KUBELET_CERTIFICATE_ARGS=--rotate-certificates=true"
#              ExecStart=
#              ExecStart=/opt/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_SYSTEM_PODS_ARGS $KUBELET_NETWORK_ARGS $KUBELET_DNS_ARGS $KUBELET_AUTHZ_ARGS $KUBELET_CGROUP_ARGS $KUBELET_CADVISOR_ARGS $KUBELET_CERTIFICATE_ARGS $KUBELET_EXTRA_ARGS
